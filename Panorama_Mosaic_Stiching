import numpy as np
import cv2 as cv2
import random
import math

img1 = cv2.imread('Rainier1.png', cv2.IMREAD_GRAYSCALE)
gaga = cv2.imread('Rainier1.png')
gaga1 = cv2.imread('Rainier2.png')
img2 = cv2.imread('Rainier2.png', cv2.IMREAD_GRAYSCALE)
img3 = cv2.imread('Rainier3.png', cv2.IMREAD_GRAYSCALE)
gaga2 = cv2.imread('Rainier3.png')
img4 = cv2.imread('Rainier5.png', cv2.IMREAD_GRAYSCALE)
gaga3 = cv2.imread('Rainier5.png')
img5 = cv2.imread('Rainier4.png', cv2.IMREAD_GRAYSCALE)
gaga4 = cv2.imread('Rainier4.png')
img6 = cv2.imread('Rainier6.png', cv2.IMREAD_GRAYSCALE)
gaga5 = cv2.imread('Rainier6.png')


final_board = np.zeros((1500, 1500, 3), np.uint8)

#We place on the Stiched_Image final board
for i in range(len(img1)):
    for j in range(len(img1[i])):
        for k in range(3):
            final_board[i][j][k] = gaga[i][j][k]

#This should project point (x, y) using the homography “H”. Return the projected point (x2, y2).
def project(x, y, H):
    mat = np.matrix([y, x, 1])
    transposed_mat = H.transpose()
    multiplied_mat = np.matmul(mat, transposed_mat)
    return multiplied_mat[0, 1] / multiplied_mat[0, 2], multiplied_mat[0, 0] / multiplied_mat[0, 2]


# is a helper function for RANSAC that computes the number of inlying points given a homography "H".
def computeInlierCount(H, matches, inlierThreshold):
    inliers = 0
    for m in matches:
        projectedPoint = project(m[0][1], m[0][0], H)
        if math.sqrt((projectedPoint[1] - m[1][0]) ** 2 + (projectedPoint[0] - m[1][1]) ** 2) < inlierThreshold:
            inliers += 1
    return inliers

def RANSAC( numIterations, blank, image1Display, image2Display, ah):
    good = []

    sift = cv2.xfeatures2d.SIFT_create()
    kp1, des1 = sift.detectAndCompute(image1Display, None)
    kp2, des2 = sift.detectAndCompute(image2Display, None)
    bf = cv2.BFMatcher()
    matches = bf.knnMatch(des1, des2, k=2)



    for m, n in matches:
        if m.distance < 0.75 * n.distance:
            good.append([m])

    A = []

    for elem in good:

        A.append([kp2[elem[0].trainIdx].pt, kp1[elem[0].queryIdx].pt])

    maxc = 0
    h = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]], dtype=np.float32)
    Wesh = []
    for l in range(numIterations):
        src = []
        dst = []

        while len(src) < 4:
            randomPoint = random.choice(A)
            if randomPoint[0] not in src:
                src.append(randomPoint[0])
                dst.append(randomPoint[1])

        src = np.asarray(src)
        dst = np.asarray(dst)


        hom, s = cv2.findHomography(src, dst)


        c = computeInlierCount(hom, A, 15)

        Wesh.append(c)

        if c > maxc:
            maxc = c
            h = hom

    offset = 2
    for i in range(len(image2Display)):
        for j in range(len(image2Display[i])):
            u, v = project(i, j, h)
            if u > 0 and v > 0 and u < len(blank) - 2 and v < len(blank) - 2:
                u = int(round(u))
                v = int(round(v))


                blank[u][v] = ah[i][j]

                for l in range(u - 5, u + 5):
                    for m in range(v - 5, v + 5):
                        blank[l][m] = ah[i][j]




    return blank

def siftMatch(image1, image2):
    sift = cv2.xfeatures2d.SIFT_create()
    kp1, des1 = sift.detectAndCompute(img1, None)
    kp2, des2 = sift.detectAndCompute(img3, None)
    bf = cv2.BFMatcher()
    matches = bf.knnMatch(des1, des2, k=2)

    return matches, kp1, kp2

good = []

sift = cv2.xfeatures2d.SIFT_create()
kp1, des1 = sift.detectAndCompute(img1, None)
kp2, des2 = sift.detectAndCompute(img2, None)
bf = cv2.BFMatcher()
matches = bf.knnMatch(des1, des2, k=2)

for m, n in matches:
    if m.distance < 0.75 * n.distance:
        good.append([m])

A = []

for elem in good:
    # A.append([kp1[elem[0].queryIdx].pt, kp2[elem[0].trainIdx].pt])
    A.append([kp2[elem[0].trainIdx].pt, kp1[elem[0].queryIdx].pt])

img35 = cv2.drawMatchesKnn(img1, kp1, img2, kp2, good, None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)

new = RANSAC(5, final_board, img1, img2, gaga1)
new1 = RANSAC(5, final_board, img1, img4, gaga3)
new2 = RANSAC(5, final_board, img1, img3, gaga2)
new3 = RANSAC(5, final_board, img1, img5, gaga4)
new4 = RANSAC(5, final_board, img1, img6, gaga5)

cv2.imshow("Result", img35)
cv2.imshow("Final_Diapo", final_board)

k = cv2.waitKey(0)
if k == 27:  # wait for ESC key to exit
    cv2.destroyAllWindows()
